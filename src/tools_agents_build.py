from langfuse import Langfuse
from langfuse.callback import CallbackHandler


# Utiliser un callback handler appropriÃ© pour Langfuse
# langfuse_handler = CallbackHandler(
#   secret_key="sk-lf-7c6de2d4-9d95-4f13-93bf-40553ddc01ed",
#   public_key="pk-lf-b9c745ef-7953-4130-8017-1a1389e5394d",
#   host="https://cloud.langfuse.com"
# )
# langfuse_handler = CallbackHandler(
#   secret_key="sk-lf-7c6de2d4-9d95-4f13-93bf-40553ddc01ed",
#   public_key="pk-lf-b9c745ef-7953-4130-8017-1a1389e5394d",
#   host="https://cloud.langfuse.com"
# )
# -*- coding: utf-8 -*-
"""Tools Agents Build.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OOYh1wS3xhQVp1U3YV8bfgMdlARtq_0_

#Setup
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture --no-stderr
# %pip install -U langgraph langchain langchain_openai langchain_experimental langsmith pandas

import getpass
import os



os.environ["TAVILY_API_KEY"] = "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"

"""#Create tools

"""

from typing import Annotated, List, Dict

from langchain_community.document_loaders import WebBaseLoader
from langchain_community.tools.tavily_search import TavilySearchResults
from langchain_core.tools import tool


tools = ["TavilyResearcher","WebScraper"]
tavily_tool = TavilySearchResults(max_results=5)


@tool
def scrape_webpages(urls: List[str]) -> str:
    """Use requests and bs4 to scrape the provided web pages for detailed information."""
    loader = WebBaseLoader(urls)
    docs = loader.load()
    return "\n\n".join(
        [
            f'<Document name="{doc.metadata.get("title", "")}">\n{doc.page_content}\n</Document>'
            for doc in docs
        ]
    )

"""#Fuction to convert agent response to human message"""

from langchain_core.messages import HumanMessage


def agent_node(state, agent, name):
    result = agent.invoke(state)
    return {
        "messages": [HumanMessage(content=result["messages"][-1].content, name=name)]
    }

"""#Create Agent Supervisor"""

from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_openai import ChatOpenAI
from pydantic import BaseModel
from typing import Literal

members = ["Researcher","WebScraper"]
system_prompt = (
    "You are a supervisor tasked with managing a conversation between the"
    " following workers:  {members}. 'Given the following user request,'"
    " respond with the worker to act next. Each worker will perform a"
    " task and respond with their results and status. When finished,"
    " respond with FINISH."
)
# Our team supervisor is an LLM node. It just picks the next agent to process
# and decides when the work is completed
options = ["FINISH"] + members


class routeResponse(BaseModel):
    next: Literal["FINISH","Researcher","WebScraper"]



prompt = ChatPromptTemplate.from_messages(
    [
        ("system", system_prompt),
        MessagesPlaceholder(variable_name="messages"),
        (
            "system",
            "Given the conversation above, who should act next?"
            " Or should we FINISH? Select one of: {options}"
        ),
    ]
).partial(options=str(options), members=", ".join(members))


llm = ChatOpenAI(model="gpt-4o")

def supervisor_agent(state):
    supervisor_chain = prompt | llm.with_structured_output(routeResponse)
    return supervisor_chain.invoke(state)

"""#Construct Graph"""

import functools
import operator
from typing import Sequence
from typing_extensions import TypedDict

from langchain_core.messages import BaseMessage

from langgraph.graph import END, StateGraph, START
from langgraph.prebuilt import create_react_agent


# The agent state is the input to each node in the graph
class AgentState(TypedDict):
    # The annotation tells the graph that new messages will always
    # be added to the current states
    messages: Annotated[Sequence[BaseMessage], operator.add]
    # The 'next' field indicates where to route to next
    next: str


research_agent = create_react_agent(llm, tools=[tavily_tool])
research_node = functools.partial(agent_node, agent=research_agent, name="Researcher")

# NOTE: THIS PERFORMS ARBITRARY CODE EXECUTION. PROCEED WITH CAUTION
webscrape_agent = create_react_agent(llm, tools=[scrape_webpages])
webscrape_node = functools.partial(agent_node, agent=webscrape_agent, name="WebScraper")

workflow = StateGraph(AgentState)
workflow.add_node("Researcher", research_node)
workflow.add_node("WebScraper", webscrape_node)
workflow.add_node("supervisor", supervisor_agent)

for member in members:
    # We want our workers to ALWAYS "report back" to the supervisor when done
    workflow.add_edge(member, "supervisor")
# The supervisor populates the "next" field in the graph state
# which routes to a node or finishes
conditional_map = {k: k for k in members}
conditional_map["FINISH"] = END
workflow.add_conditional_edges("supervisor", lambda x: x["next"], conditional_map)
# Finally, add entrypoint
workflow.add_edge(START, "supervisor")

graph = workflow.compile()


if __name__ == "__main__":
    # Test the workflow with a sample input
    result = graph.invoke({"messages": [HumanMessage(content="scrape this page : https://medium.com/data-science-at-microsoft/how-large-language-models-work-91c362f5b78f")]})
    print((result))

'''# Function to format the input question for the graph
def inp(question: str) -> dict:
    return {
        "messages": [HumanMessage(content=question)]
    }

def out(state: dict) -> str:
    if "messages" in state and len(state["messages"]) > 0:
        print(f"Final state: {state}")
        return state["messages"][-1].content  # Return the last message content
    else:
        return "No meaningful response generated."


# Create the processing chain
chain = RunnableLambda(inp) | graph | RunnableLambda(out)'''


"""#Invoke the team"""
'''
for s in graph.stream(
    {
        "messages": [
            HumanMessage(content="Scrape and summerize briefly pages from the wikipedia website about machine learning")
        ]
    }
):
    if "__end__" not in s:
        print(s)
        print("----")

for s in graph.stream(
    {"messages": [HumanMessage(content="Write a brief research report on LLMs.")]},
    {"recursion_limit": 100},
):
    if "__end__" not in s:
        print(s)
        print("----")

'''


# rep=graph.invoke("scrape this page : https://medium.com/data-science-at-microsoft/how-large-language-models-work-91c362f5b78f")